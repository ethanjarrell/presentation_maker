<!DOCTYPE html>
<html>

<head>

  <meta charset="utf-8">
  <title>The Talk Maker</title>
  <link rel="stylesheet" href="/talkgenerator.css">
  <link href="https://fonts.googleapis.com/css?family=Slabo+27px" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Volkhov" rel="stylesheet">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

  <script>
  $(document).ready(function() {
    console.log("talking");

    let topicInput = document.getElementById('topicInput');
    let genconf = document.getElementById('genconf');
    genconf.onclick = searchAPI;
    console.log(topicInput);
    console.log(genconf);



    function searchAPI() {

      let searchResults = topicInput.value;

      var str = topicInput.value;

      var mapObj = {
        "free agency": "agency",
        "the atonement": "atonement",
        "baptize": "baptism",
        "book of mormon": "bookofmormon",
        "love": "charity",
        "charitable": "charity",
        "pure love": "charity",
        "pure love of christ": "charity",
        "created": "creation",
        "religion": "church",
        "church organization": "church",
        "d&c": "doctrinecovenants",
        "events": "events",
        "heavenly father": "god",
        "father in heaven": "god",
        "god the father": "god",
        "father": "god",
        "belief": "faith",
        "hope": "faith",
        "the holy ghost": "holyghost",
        "holy spirit": "holyghost",
        "holy ghost": "holyghost",
        "spirit": "holyghost",
        "the spirit": "holyghost",
        "honesty": "honesty",
        "honest": "honesty",
        "lie": "honesty",
        "steal": "honesty",
        "integrity": "honesty",
        "bible": "newtestament",
        "new testament": "newtestament",
        "obedience": "obedience",
        "follow": "obedience",
        "submission": "obedience",
        "submissive": "obedience",
        "old testament": "oldtestament",
        "people": "people",
        "melchizedek priesthood": "priesthood",
        "aaronic priesthood": "priesthood",
        "melchizedek": "priesthood",
        "aaronic": "priesthood",
        "prophets of god": "prophets",
        "prophet": "prophets",
        "prophets": "prophets",
        "repentence": "repentence",
        "repent": "repentence",
        "repentance": "repentence",
        "forgiveness": "repentence",
        "bread and water": "sacrament",
        "the sacrament": "sacrament",
        "scripture": "scriptures",
        "scriptures": "scriptures",
        "the scriptures": "scriptures",
        "word of god": "scriptures",
        "labor": "service",
        "work": "service",
        "responsibility": "service",
        "personal responsibility": "service",
        "fall of man": "thefall",
        "the fall": "thefall",
        "fall of mankind": "thefall",
        "fall": "thefall",
        "jesus christ": "jesus",
        "christ": "jesus",
        "savior": "jesus",
        "redeemer": "jesus",
        "lord": "jesus",
        "fall of adam": "thefall",
        "garden of eden": "thefall",
        "lucifer": "thefall",
        "original sin": "thefall",
        "law of health": "wordofwisdom",
        "word of wisdom": "wordofwisdom",
        "apostles": "apostle",
        "the godhead": "godhead",
        "revelation": "testimony",
        "truth": "testimony",
        "testify": "testimony",
        "conversion": "testimony",
        "devil": "hell",
        "satan": "hell",
        "damnation": "hell",
        "torment": "hell",
        "eternal marriage": "marriage",
        "temple marriage": "marriage",
        "fire and brimstone": "hell",
        "celestial kingdom": "heaven",
        "plan of salvation": "heaven",
        "telestial": "heaven",
        "exaltation": "heaven",
        "immortality": "heaven",
        "eternal life": "heaven",
        "three degrees of glory": "heaven",
        "missionaries": "missionary",
        "preach": "missionary",
        "preaching": "missionary",
        "missionary work": "missionary",
        "christmas": "nativity",
        "church history": "pioneer",
        "pioneers": "pioneer",
        "handcarts": "pioneer",
        "nauvoo": "pioneer",
        "premortal existence": "premortal",
        "council in heaven": "premortal",
        "premortal life": "premortal",
        "war in heaven": "premortal",
        "easter": "resurrection",
        "resurrected": "resurrection",
        "crucifixion": "resurrection",
        "cross": "resurrection",
        "the resurrection": "resurrection",
        "woman": "women",
        "widow": "women",
        "mary": "women",
        "mothers": "women",
        "mother": "women",
        "motherhood": "women",
        "daughter": "women",
        "daughters": "women",
        "relief society": "women",
        "daughters of god": "women",
        "the great apostasy": "apostasy",
        "restoration": "apostasy",
        "first vision": "apostasy",
        "the first vision": "apostasy",
        "the restoration": "apostasy",
        "apostasy and restoration": "apostasy",
        "first vision": "apostasy",
        "family home evening": "family",
        "family prayer": "family",
        "eternal family": "family",
        "virtue": "chastity",
        "chaste": "chastity",
        "virtuous": "chastity",
        "child": "children",
        "primary": "children",
        "primary children": "children",
        "covenant": "covenants",
        "temple covenant": "covenants",
        "temple covenants": "covenants",
        "baptismal covenant": "covenants",
        "baptismal covenants": "covenants",
        "life after death": "death",
        "die": "death",
        "mortality": "death",
        "family history": "genealogy",
        "ancestors": "genealogy",
        "family tree": "genealogy",
        "spiritual gifts": "giftsofthespirit",
        "gifts of the spirit": "giftsofthespirit",
        "good news": "gospel",
        "good news of the gospel": "gospel",
        "the gospel": "gospel",
        "gospel": "gospel",
        "plan of salvation": "gospel",
        "the plan of salvation": "gospel",
        "happy": "happiness",
        "joy": "happiness",
        "plan of happiness": "happiness",
        "miracle": "miracles",
        "brigham young": "brighamyoung",
        "brigham": "brighamyoung",
        "davdid bednar": "dabednar",
        "bednar": "dabednar",
        "davdid a. bednar": "dabednar",
        "daivd o mckay": "davidomckay",
        "daivd o. mckay": "davidomckay",
        "uchtdorf": "dfuchtdorf",
        "dieter uchtdorf": "dfuchtdorf",
        "dieter f. uchtdorf": "dfuchtdorf",
        "renlund": "dgrenlund",
        "dale g. renlund": "dgrenlund",
        "oaks": "dhoaks",
        "dallin h. oaks": "dhoaks",
        "D. Todd Christofferson": "dtchristofferson",
        "Christofferson": "dtchristofferson",
        "benson": "ezrataftbenson",
        "ezra taft benson": "ezrataftbenson",
        "benson": "ezrataftbenson",
        "george a. smith": "georgeasmith",
        "george albert smith": "georgeasmith",
        "gary e. stevenson": "gestevenson",
        "gordon b. hinckley": "gordonbhinckley",
        "hinckley": "gordonbhinckley",
        "harold b. lee": "haroldblee",
        "eyring": "hbeyring",
        "henry b. eyring": "hbeyring",
        "grant": "heberjgrant",
        "heber j. grant": "heberjgrant",
        "howard w. hunter": "howardwhunter",
        "hunter": "howardwhunter",
        "john taylor": "johntaylor",
        "joseph fielding smith": "josephfieldingsmith",
        "joseph f. smith": "josephfsmith",
        "joseph smith": "josephsmith",
        "joseph": "josephsmith",
        "jeffrey r. holland": "jrholland",
        "holland": "jrholland",
        "lorenzo snow": "lorenzosnow",
        "snow": "lorenzosnow",
        "m. russell ballard": "mrballard",
        "ballard": "mrballard",
        "neil l. anderson": "nlanderson",
        "quentin l. cook": "qlcook",
        "rasband": "rarasband",
        "ronald a. rasband": "rarasband",
        "russell m. nelson": "rmnelson",
        "nelson": "rmnelson",
        "spencer w. kimball": "spencerkimball",
        "thomas s. monson": "tsmonson",
        "monson": "tsmonson",
        "woodruff": "wilfordwoodruff",
        "wilford woodruff": "wilfordwoodruff",
        "self reliance": "selfreliance",
        "self-reliance": "selfreliance",
        "second coming": "secondcoming",
        "the second coming": "secondcoming",
        "miracles": "miracles",
        "miracle": "miracles",
      };
      var re = new RegExp(Object.keys(mapObj).join("|"), "gi");
      keyWord = str.replace(re, function(matched) {
        return mapObj[matched.toLowerCase()];
      });






      fetch('https://presentation-maker.herokuapp.com/api/scriptures/' + keyWord).then(function(response) {
        if (response.status != 200) {
          window.alert("Sorry, nothing matches those search terms.  Try a different word, or a similar terms.");
          return ;
        }



        response.json().then(function(data) {
          let api = data;


          let bookArray = [];

          let standardWork = "";
          let book = "";
          let verses = "";
          let verse_text = "";
          let chapter = "";
          let speaker = "";
          let listener = "";
          let newObj = {};
          let objectArray = [];


            for (var i = 0; i < api.length; i++) {
              let book = api[i].book_and_verse_number;

             let verse_text = api[i].verse_text;
              bookArray.push(book);
              bookArray.push(verse_text);




            for (var i = 0; i < bookArray.length; i++) {
              let a = [];
              function determineVerses(x) {
                if (x[i].length > 0) {
                let verses = x[i].match(/\d+/g);
                x[i].match( verses );
                a.push(verses);
            }else{
            }
            return a;
          }
           verses = determineVerses(bookArray);



               str = bookArray,
                  matches = bookArray[i].match(/\d+$/),
                  chapter;

              if (matches) {
                  chapter = matches[0];
              }
               book = bookArray[i].replace(/\d+$/, "");
            let newBook = book.toLowerCase();
            let newerBook = newBook.replace(/ /g,'');
            let newChapter = parseInt(chapter);



            switch (newerBook) {
              case '1nephi' :
              standardWork = "The Book of Mormon";
              break;

              case '2nephi' :
              standardWork = "The Book of Mormon";
              break;

              case 'jacob' :
              standardWork = "The Book of Mormon";
              break;

              case 'enos' :
              standardWork = "The Book of Mormon";
              break;

              case 'jarom' :
              standardWork = "The Book of Mormon";
              break;

              case 'omni' :
              standardWork = "The Book of Mormon";
              break;

              case 'wordsofmormon' :
              standardWork = "The Book of Mormon";
              break;

              case 'mosiah' :
              standardWork = "The Book of Mormon";
              break;

              case 'alma' :
              standardWork = "The Book of Mormon";
              break;

              case 'helaman' :
              standardWork = "The Book of Mormon";
              break;

              case '3nephi' :
              standardWork = "The Book of Mormon";
              break;

              case '4nephi' :
              standardWork = "The Book of Mormon";
              break;

              case 'mormon' :
              standardWork = "The Book of Mormon";
              break;

              case 'ether' :
              standardWork = "The Book of Mormon";
              break;

              case 'moroni':
              standardWork = "The Book of Mormon";
              break;

              standardWork = "The Book of Mormon";
              break;

              default:
              standardWork = "The New Testament";
            }


            function determineSpeakerAndListener(a, b) {

              let speaker = "";
              let listener = "";

              if (a == '1nephi') {
                speaker = "Nephi";
                listener = "his family";
              }

              else if (a == '2nephi') {
                speaker = "Nephi";
                listener = "his family";
              }

              else if (a == 'jacob') {
                speaker = "Jacob";
                listener = "readers of the Book of Mormon";
              }

              else if (a == 'enos') {
                speaker = "Enos";
                listener = "his posterity";
              }

              else if (a == 'jarom') {
                speaker = "Jarom";
                listener = "his family";
              }

              if (a == 'omni') {
                speaker = "Omni";
                listener = "future generations";
              }

              if (a == 'wordsofmormon') {
                speaker = "Mormon";
                listener = "those who would read the Book of Mormon";
              }

              else if ( a == 'mosiah' && ( b == 1 || 2 || 3 || 4 || 5 || 6 )) {
              speaker = "King Benjamin";
              listener = "His sons and his people"; }



              else if ( a == 'mosiah' && ( b == 7 || 8 )) {
              speaker = "Ammon";
              listener = "The people of Limhi"; }



              else if ( a == 'mosiah' && ( b == 9 || 10 )) {
              speaker = "Zeniff";
              listener = "His people"; }



              else if ( a == 'mosiah' && ( b == 11 || 12 || 13 )) {
              speaker = "Abinadi";
              listener = "The wicked King Noah"; }



              else if ( a == 'mosiah' && ( b == 14  )) {
              speaker = "Isaiah";
              listener = "A future generation"; }



              else if ( a == 'mosiah' && ( b == 17 || 18 )) {
              speaker = "Alma the Elder";
              listener = "a small group of believers"; }



              else if ( a == 'mosiah' && ( b == 21 )) {
              speaker = "Ammon";
              listener = "The people of Limhi"; }



              else if ( a == 'mosiah' && ( b == 22 )) {
              speaker = "Ammon";
              listener = "his people"; }



              else if ( a == 'mosiah' && ( b == 23 || 24 || 25 || 26 )) {
              speaker = "Alma the Elder";
              listener = "members of the Church"; }


              else if ( a == 'mosiah' && ( b == 27 || 28 || 29 )) {
              speaker = "Mosiah";
              listener = "His sons"; }



              else if ( a == 'alma' && ( b == 1 )) {
              speaker = "Gideon";
              listener = "His sons and his people"; }



              else if ( a == 'alma' && ( b == 4 || 5 )) {
              speaker = "Alma the Younger";
              listener = "the people in their cities and villages throughout the land"; }



              else if ( a == 'alma' && ( b == 6 || 7 )) {
              speaker = "Alma the Younger";
              listener = "the people in the land of Gideon"; }



              else if ( a == 'alma' && ( b == 8 )) {
              speaker = "Alma the Younger";
              listener = "Amulek and the people in the land of Ammonihah"; }



              else if ( a == 'alma' && ( b == 9 || 10 )) {
              speaker = "Alma the Younger";
              listener = "Amulek and the people in the land of Ammonihah"; }



              else if ( a == 'alma' && ( b == 11 )) {
              speaker = "Amulek";
              listener = "Zeezrom"; }



              else if ( a == 'alma' && ( b == 12 )) {
              speaker = "Alma the Younger";
              listener = "Zeezrom"; }



              else if ( a == 'alma' && ( b == 13 )) {
              speaker = "Alma the Younger and Amulek";
              listener = "the people in the land of Ammonihah"; }



              else if ( a == 'alma' && ( b == 14 )) {
              speaker = "Alma the Younger and Amulek";
              listener = "the people in the land of Ammonihah"; }



              else if ( a == 'alma' && ( b == 15 )) {
              speaker = "Alma the Younger and Amulek";
              listener = "Zeezrom and the Church in Sidom"; }



              else if ( a == 'alma' && ( b == 16 )) {
              speaker = "Alma the Younger and Amulek";
              listener = "the Church"; }



              else if ( a == 'alma' && ( b == 17 )) {
              speaker = "Ammon";
              listener = "the Lamanites"; }



              else if ( a == 'alma' && ( b == 18 )) {
              speaker = "Ammon";
              listener = "King Lamoni"; }



              else if ( a == 'alma' && ( b == 19 )) {
              speaker = "Ammon";
              listener = "King Lamoni and the Lamanites"; }



              else if ( a == 'alma' && ( b == 20 )) {
              speaker = "Ammon";
              listener = "Lamoni and Lamoni's Father"; }



              else if ( a == 'alma' && ( b == 21 )) {
              speaker = "Aaron";
              listener = "the Amalekites"; }



              else if ( a == 'alma' && ( b == 22 )) {
              speaker = "Ammon";
              listener = "Lamoni's Father"; }



              else if ( a == 'alma' && ( b == 23 )) {
              speaker = "The Sons of Mosiah";
              listener = "the Anti-Nephi-Lehies"; }



              else if ( a == 'alma' && ( b == 24 )) {
              speaker = "The Sons of Mosiah";
              listener = "the Anti-Nephi-Lehies"; }



              else if ( a == 'alma' && ( b == 26 )) {
              speaker = "Ammon";
              listener = "his brethren"; }



              else if ( a == 'alma' && ( b == 27 )) {
              speaker = "Ammon";
              listener = "Alma and the Son's of Mosiah"; }



              else if ( a == 'alma' && ( b == 29 )) {
              speaker = "Alma";
              listener = "the Nephites"; }



              else if ( a == 'alma' && ( b == 30 )) {
              speaker = "Alma";
              listener = "Korihor"; }



              else if ( a == 'alma' && ( b == 31 )) {
              speaker = "Alma";
              listener = "the Zoramites"; }



              else if ( a == 'alma' && ( b == 32 )) {
              speaker = "Alma";
              listener = "the poorer segment of the Zoramites"; }



              else if ( a == 'alma' && ( b == 33 )) {
              speaker = "Zenos and Zenock";
              listener = "a future generation"; }



              else if ( a == 'alma' && ( b == 34 )) {
              speaker = "Amulek";
              listener = "the Church"; }



              else if ( a == 'alma' && ( b == 35 )) {
              speaker = "Alma";
              listener = "the people of Zarahemla"; }



              else if ( a == 'alma' && ( b == 36 )) {
              speaker = "Alma";
              listener = "his son, Helaman"; }



              else if ( a == 'alma' && ( b == 37 )) {
              speaker = "Alma";
              listener = "his son, Helaman"; }



              else if ( a == 'alma' && ( b == 38 )) {
              speaker = "Alma";
              listener = "his son, Shiblon"; }



              else if ( a == 'alma' && ( b == 39 || 40 || 41 || 42 )) {
              speaker = "Alma";
              listener = "his son, Corianton"; }



              else if ( a == 'alma' && ( b == 43 )) {
              speaker = "Alma and his sons";
              listener = "the Zoramites"; }



              else if ( a == 'alma' && ( b == 44 )) {
              speaker = "Captain Moroni";
              listener = "Zerahemnah"; }



              else if ( a == 'alma' && ( b == 45 )) {
              speaker = "Helaman";
              listener = "his people"; }



              else if ( a == 'alma' && ( b == 46 )) {
              speaker = "Captain Moroni";
              listener = "the people of Zarahemla"; }



              else if ( a == 'alma' && ( b == 48 )) {
              speaker = "Captain Moroni";
              listener = "the people of Zarahemla"; }



              else if ( a == 'alma' && ( b == 50 )) {
              speaker = "Captain Moroni";
              listener = "the Nephites"; }



              else if ( a == 'alma' && ( b == 51 )) {
              speaker = "Captain Moroni";
              listener = "Pahoran and the king men"; }



              else if ( a == 'alma' && ( b == 52 )) {
              speaker = "Captain Moroni";
              listener = "his armies"; }



              else if ( a == 'alma' && ( b == 53 )) {
              speaker = "Helaman";
              listener = "the 2000 stripling warriors"; }



              else if ( a == 'alma' && ( b == 54 )) {
              speaker = "Captain Moroni";
              listener = "Ammoron"; }



              else if ( a == 'alma' && ( b == 55 )) {
              speaker = "Captain Moroni";
              listener = "his army and the Lamanties"; }



              else if ( a == 'alma' && ( b == 56 || 57 )) {
              speaker = "Helaman";
              listener = "Moroni"; }



              else if ( a == 'alma' && ( b == 59 || 60 || 61 || 62 )) {
              speaker = "Captain Moroni";
              listener = "Pahoran"; }


              else if ( a == 'helaman' && ( b == 4 || 5 || 6 || 7 || 8 )) {
              speaker = "the missionaries, Nephi and Lehi";
              listener = "the people of Nephi"; }


              else if ( a == 'helaman' && ( b == 9 || 10 || 11 || 12 )) {
              speaker = "Nephi";
              listener = "the people of Nephi"; }


              else if ( a == 'helaman' && ( b == 13 || 14 || 15 )) {
              speaker = "Samuel the Lamanite";
              listener = "the Nephites"; }


              else if ( a == 'helaman' && ( b == 16 )) {
              speaker = "Nephi";
              listener = "the people of Nephi"; }


              else if ( a == '3nephi' && ( b == 1)) {
              speaker = "Nephi";
              listener = "the Nephites"; }


              else if ( a == '3nephi' && ( b == 9 || 10 || 11 || 12 || 13 || 14 || 15 || 16 || 17 || 18 || 19 || 20 || 21 || 22 || 23 || 24 || 25 || 26)) {
              speaker = "Jesus Christ";
              listener = "the Nephites"; }


              else if ( a == '4nephi' && ( b == 1 )) {
              speaker = "Mormon";
              listener = "a future generation"; }


              else if ( a == 'mormon' && ( b == 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 )) {
              speaker = "Mormon";
              listener = "a future generation"; }


              else {
                speaker = "the main figure here";
                listener = "the people";
              }

              return [speaker, listener];
}
let newBook_andChapter = determineSpeakerAndListener(newerBook, newChapter);
 speaker = newBook_andChapter[0];
 listener = newBook_andChapter[1];


 newObj =
   {"standard_works" : standardWork,
   "book" : book,
   "verses" : verses,
   "verse_text" : verse_text,
   "chapter" : chapter,
   "speaker" : speaker,
   "listener" : listener,};


 function pushToArray(x, y) {

   if (typeof{x} === 'object') {
     y.push(x);
   }
   return y;
 }
 objectArray = pushToArray(newObj, objectArray);

}
          }

          let topic = document.getElementById('topicInput').value;



          let key = "";
          function checkForValue(json, value) {
            for (key in json) {
        if (typeof (json[key]) === "object") {
            return checkForValue(json[key], value);
        } else if (json[key] === value) {
            return true;
            key = value;
        }
    }
    return key;
}
let myValue = checkForValue(mapObj, topic);

let wordArray = [];


fetch('https://presentation-maker.herokuapp.com/api/genconf/' + keyWord).then(function(response) {
  if (response.status != 200) {
    window.alert("Sorry, nothing matches those search terms.  Try a different word, or a similar terms.");
    return ;
  }

  let author = "";
  let position = "";
  let talk_title = "";
  let year = "";
  let paragraph11 = "";
  let paragraph21 = "";
  let paragraph31 = "";
  let paragraph41 = "";
  let paragraph51 = "";
  let paragraph61 = "";
  let paragraph71 = "";
  let paragraph81 = "";
  let paragraph91 = "";
  let paragraph101 = "";
  let paragraph12 = "";
  let paragraph22 = "";
  let paragraph32 = "";
  let paragraph42 = "";
  let paragraph52 = "";
  let paragraph62 = "";
  let paragraph72 = "";
  let paragraph82 = "";
  let paragraph92 = "";
  let paragraph102 = "";
  let paragraph13 = "";
  let paragraph23 = "";
  let paragraph33 = "";
  let paragraph43 = "";
  let paragraph53 = "";
  let paragraph63 = "";
  let paragraph73 = "";
  let paragraph83 = "";
  let paragraph93 = "";
  let paragraph103 = "";
  let paragraph14 = "";
  let paragraph24 = "";
  let paragraph34 = "";
  let paragraph44 = "";
  let paragraph54 = "";
  let paragraph64 = "";
  let paragraph74 = "";
  let paragraph84 = "";
  let paragraph94 = "";
  let paragraph104 = "";
  let paragraph15 = "";
  let paragraph25 = "";
  let paragraph35 = "";
  let paragraph45 = "";
  let paragraph55 = "";
  let paragraph65 = "";
  let paragraph75 = "";
  let paragraph85 = "";
  let paragraph95 = "";
  let paragraph105 = "";


  let paragraphs1 = "";
  let paragraphs2 = "";
  let paragraphs3 = "";
  let paragraphs4 = "";
  let paragraphs5 = "";

  let gencon_talk1 = [];
  let gencon_talk2 = [];
  let gencon_talk3 = [];
  let gencon_talk4 = [];
  let gencon_talk5 = [];

  response.json().then(function(data) {
    let generalConference = data;

    for (var i = 0; i < generalConference.length - 4; i++) {
            author1 = generalConference[0].author;
            gencon_talk1.push(author1);
            position1 = generalConference[0].position;
            gencon_talk1.push(position1);
            talk_title1 = generalConference[0].talk_title;
            gencon_talk1.push(talk_title1);
            year1 = generalConference[0].year;
            gencon_talk1.push(year1);
            paragraph11 = generalConference[0].paragraph1;
            paragraph21 = generalConference[0].paragraph2;
            paragraph31 = generalConference[0].paragraph3;
            paragraph41 = generalConference[0].paragraph4;
            paragraph51 = generalConference[0].paragraph5;
            paragraph61 = generalConference[0].paragraph6;
            paragraph71 = generalConference[0].paragraph7;
            paragraph81 = generalConference[0].paragraph8;
            paragraph91 = generalConference[0].paragraph9;
            paragraph101 = generalConference[0].paragraph10;
            paragraphs1 = paragraph11.concat(paragraph21, paragraph31, paragraph41, paragraph51, paragraph61, paragraph61, paragraph71, paragraph81, paragraph91, paragraph101);
            paragraphs1.toString();
            gencon_talk1.push(paragraphs1);
          }

      for (var i = 0; i < generalConference.length; i++) {
            author2 = generalConference[1].author;
            gencon_talk2.push(author2);
            position2 = generalConference[1].position;
            gencon_talk2.push(position2);
            talk_title2 = generalConference[1].talk_title;
            gencon_talk2.push(talk_title2);
            year2 = generalConference[1].year;
            gencon_talk2.push(year2);
            paragraph12 = generalConference[1].paragraph1;
            paragraph22 = generalConference[1].paragraph2;
            paragraph32 = generalConference[1].paragraph3;
            paragraph42 = generalConference[1].paragraph4;
            paragraph52 = generalConference[1].paragraph5;
            paragraph62 = generalConference[1].paragraph6;
            paragraph72 = generalConference[1].paragraph7;
            paragraph82 = generalConference[1].paragraph8;
            paragraph92 = generalConference[1].paragraph9;
            paragraph102 = generalConference[1].paragraph10;
            paragraphs2 = paragraph12.concat(paragraph22, paragraph32, paragraph42, paragraph52, paragraph62, paragraph62, paragraph72, paragraph82, paragraph92, paragraph102);
            paragraphs2.toString();
            gencon_talk2.push(paragraphs2);
          }

          for (var i = 0; i < generalConference.length; i++) {
            author3 = generalConference[2].author;
            gencon_talk3.push(author3);
            position3 = generalConference[2].position;
            gencon_talk3.push(position3);
            talk_title3 = generalConference[2].talk_title;
            gencon_talk3.push(talk_title3);
            year3 = generalConference[2].year;
            gencon_talk3.push(year3);
            paragraph13 = generalConference[2].paragraph1;
            paragraph23 = generalConference[2].paragraph2;
            paragraph33 = generalConference[2].paragraph3;
            paragraph43 = generalConference[2].paragraph4;
            paragraph53 = generalConference[2].paragraph5;
            paragraph63 = generalConference[2].paragraph6;
            paragraph73 = generalConference[2].paragraph7;
            paragraph83 = generalConference[2].paragraph8;
            paragraph93 = generalConference[2].paragraph9;
            paragraph103 = generalConference[2].paragraph10;
            paragraphs3 = paragraph13.concat(paragraph23, paragraph33, paragraph43, paragraph53, paragraph63, paragraph63, paragraph73, paragraph83, paragraph93, paragraph103);
            paragraphs3.toString();
            gencon_talk3.push(paragraphs3);
          }

        for (var i = 0; i < generalConference.length; i++) {
            author4 = generalConference[3].author;
            gencon_talk4.push(author4);
            position4 = generalConference[3].position;
            gencon_talk4.push(position4);
            talk_title4 = generalConference[3].talk_title;
            gencon_talk4.push(talk_title4);
            year4 = generalConference[3].year;
            gencon_talk4.push(year4);
            paragraph14 = generalConference[3].paragraph1;
            paragraph24 = generalConference[3].paragraph2;
            paragraph34 = generalConference[3].paragraph3;
            paragraph44 = generalConference[3].paragraph4;
            paragraph54 = generalConference[3].paragraph5;
            paragraph64 = generalConference[3].paragraph6;
            paragraph74 = generalConference[3].paragraph7;
            paragraph84 = generalConference[3].paragraph8;
            paragraph94 = generalConference[3].paragraph9;
            paragraph104 = generalConference[3].paragraph10;
            paragraphs4 = paragraph14.concat(paragraph24, paragraph34, paragraph44, paragraph54, paragraph64, paragraph64, paragraph74, paragraph84, paragraph94, paragraph101);
            paragraphs4.toString();
            gencon_talk4.push(paragraphs4);
          }

for (var i = 0; i < generalConference.length; i++) {
            author5 = generalConference[4].author;
            gencon_talk5.push(author5);
            position5 = generalConference[4].position;
            gencon_talk5.push(position5);
            talk_title5 = generalConference[4].talk_title;
            gencon_talk5.push(talk_title5);
            year5 = generalConference[4].year;
            gencon_talk5.push(year5);
            paragraph15 = generalConference[4].paragraph1;
            paragraph25 = generalConference[4].paragraph2;
            paragraph35 = generalConference[4].paragraph3;
            paragraph45 = generalConference[4].paragraph4;
            paragraph55 = generalConference[4].paragraph5;
            paragraph65 = generalConference[4].paragraph6;
            paragraph75 = generalConference[4].paragraph7;
            paragraph85 = generalConference[4].paragraph8;
            paragraph95 = generalConference[4].paragraph9;
            paragraph105 = generalConference[4].paragraph10;
            paragraphs5 = paragraph15.concat(paragraph25, paragraph35, paragraph45, paragraph55, paragraph65, paragraph65, paragraph75, paragraph85, paragraph95, paragraph105);
            paragraphs5.toString();
            gencon_talk5.push(paragraphs5);
          }

let pa1 = gencon_talk1[4];
let pa2 = gencon_talk2[4];
let pa3 = gencon_talk3[4];
let pa4 = gencon_talk4[4];
let pa5 = gencon_talk5[4];

          var scripture1 = objectArray[Math.floor(Math.random() * objectArray.length)];


          let verse1 = scripture1.verse_text;

          var scripture2 = objectArray[Math.floor(Math.random() * objectArray.length)];

          let verse2 = scripture2.verse_text;
          var scripture3 = objectArray[Math.floor(Math.random() * objectArray.length)];

          let verse3 = scripture3.verse_text;
          var scripture4 = objectArray[Math.floor(Math.random() * objectArray.length)];

          let verse4 = scripture4.verse_text;
          var scripture5 = objectArray[Math.floor(Math.random() * objectArray.length)];

          let verse5 = scripture5.verse_text;

          function getGenConPhrase1 (x) {
            let definition = ["define", "definition", "meaning of", "defined", topic+" is", topic+" means"];
            let test_str = "";
            let start_pos = "";
            let end_pos = "";
            let text_to_get = "";
            let myKeyWord = "";
            if(x.includes(definition[0]) == true) {
             test_str = x;
             start_pos = test_str.indexOf(definition[0])-300;
             end_pos = test_str.indexOf(definition[0])+300;
             text_to_get = test_str.substring(start_pos, end_pos);
           myKeyWord = definition[0];}

           else if(x.includes(definition[1]) == true) {
            test_str = x;
            start_pos = test_str.indexOf(definition[1])-300;
            end_pos = test_str.indexOf(definition[1])+300;
            text_to_get = test_str.substring(start_pos, end_pos);
          myKeyWord = definition[1];}

          else if(x.includes(definition[2]) == true) {
           test_str = x;
           start_pos = test_str.indexOf(definition[2])-300;
           end_pos = test_str.indexOf(definition[2])+300;
           text_to_get = test_str.substring(start_pos, end_pos);
         myKeyWord = definition[2];}

         else if(x.includes(definition[3]) == true) {
          test_str = x;
          start_pos = test_str.indexOf(definition[3])-300;
          end_pos = test_str.indexOf(definition[3])+300;
          text_to_get = test_str.substring(start_pos, end_pos);
        myKeyWord = definition[3];}

        else if(x.includes(definition[4]) == true) {
         test_str = x;
         start_pos = test_str.indexOf(definition[4])-300;
         end_pos = test_str.indexOf(definition[4])+300;
         text_to_get = test_str.substring(start_pos, end_pos);
       myKeyWord = definition[4];}

       else if(x.includes(definition[5]) == true) {
        test_str = x;
        start_pos = test_str.indexOf(definition[5])-300;
        end_pos = test_str.indexOf(definition[5])+300;
        text_to_get = test_str.substring(start_pos, end_pos);
      myKeyWord = definition[5];}

              else {
            console.log("none found");
          }
            return [text_to_get, myKeyWord];
          }

          function getGenConBlessings1 (x) {
            let definition = ["blessings of", "blessings from", "brings us", "we receive", "blessed with", "blessings"];
            let test_str = "";
            let start_pos = "";
            let end_pos = "";
            let text_to_get = "";
            let myKeyWord = "";
            if(x.includes(definition[0]) == true) {
             test_str = x;
             start_pos = test_str.indexOf(definition[0])-300;
             end_pos = test_str.indexOf(definition[0])+300;
             text_to_get = test_str.substring(start_pos, end_pos);
           myKeyWord = definition[0];}

           else if(x.includes(definition[1]) == true) {
            test_str = x;
            start_pos = test_str.indexOf(definition[1])-300;
            end_pos = test_str.indexOf(definition[1])+300;
            text_to_get = test_str.substring(start_pos, end_pos);
          myKeyWord = definition[1];}

          else if(x.includes(definition[2]) == true) {
           test_str = x;
           start_pos = test_str.indexOf(definition[2])-300;
           end_pos = test_str.indexOf(definition[2])+300;
           text_to_get = test_str.substring(start_pos, end_pos);
         myKeyWord = definition[2];}

         else if(x.includes(definition[3]) == true) {
          test_str = x;
          start_pos = test_str.indexOf(definition[3])-300;
          end_pos = test_str.indexOf(definition[3])+300;
          text_to_get = test_str.substring(start_pos, end_pos);
        myKeyWord = definition[3];}

        else if(x.includes(definition[4]) == true) {
         test_str = x;
         start_pos = test_str.indexOf(definition[4])-300;
         end_pos = test_str.indexOf(definition[4])+300;
         text_to_get = test_str.substring(start_pos, end_pos);
       myKeyWord = definition[4];}

       else if(x.includes(definition[5]) == true) {
        test_str = x;
        start_pos = test_str.indexOf(definition[5])-300;
        end_pos = test_str.indexOf(definition[5])+300;
        text_to_get = test_str.substring(start_pos, end_pos);
      myKeyWord = definition[5];}

              else {
            console.log("none found");
          }
            return text_to_get;
          }

          function getGenConToDo1 (x) {
            let definition = ["we must", "we should", "in order to", "can become", "strive for", "if we will"];
            let test_str = "";
            let start_pos = "";
            let end_pos = "";
            let text_to_get = "";
            let myKeyWord = "";
            if(x.includes(definition[0]) == true) {
             test_str = x;
             start_pos = test_str.indexOf(definition[0])-300;
             end_pos = test_str.indexOf(definition[0])+300;
             text_to_get = test_str.substring(start_pos, end_pos);
           myKeyWord = definition[0];}

           else if(x.includes(definition[1]) == true) {
            test_str = x;
            start_pos = test_str.indexOf(definition[1])-300;
            end_pos = test_str.indexOf(definition[1])+300;
            text_to_get = test_str.substring(start_pos, end_pos);
          myKeyWord = definition[1];}

          else if(x.includes(definition[2]) == true) {
           test_str = x;
           start_pos = test_str.indexOf(definition[2])-300;
           end_pos = test_str.indexOf(definition[2])+300;
           text_to_get = test_str.substring(start_pos, end_pos);
         myKeyWord = definition[2];}

         else if(x.includes(definition[3]) == true) {
          test_str = x;
          start_pos = test_str.indexOf(definition[3])-300;
          end_pos = test_str.indexOf(definition[3])+300;
          text_to_get = test_str.substring(start_pos, end_pos);
        myKeyWord = definition[3];}

        else if(x.includes(definition[4]) == true) {
         test_str = x;
         start_pos = test_str.indexOf(definition[4])-300;
         end_pos = test_str.indexOf(definition[4])+300;
         text_to_get = test_str.substring(start_pos, end_pos);
       myKeyWord = definition[4];}

       else if(x.includes(definition[5]) == true) {
        test_str = x;
        start_pos = test_str.indexOf(definition[5])-300;
        end_pos = test_str.indexOf(definition[5])+300;
        text_to_get = test_str.substring(start_pos, end_pos);
      myKeyWord = definition[5];}

              else {
            console.log("none found");
          }
            return text_to_get;
          }



          let resultsArray1 = getGenConPhrase1(pa1);
          let resultsArray2 = getGenConPhrase1(pa2);
          let resultsArray3 = getGenConPhrase1(pa3);
          let resultsArray4 = getGenConPhrase1(pa4);
          let resultsArray5 = getGenConPhrase1(pa5);

          let blessingsQuote1 = getGenConBlessings1(pa1);
          let blessingsQuote2 = getGenConBlessings1(pa2);
          let blessingsQuote3 = getGenConBlessings1(pa3);
          let blessingsQuote4 = getGenConBlessings1(pa4);
          let blessingsQuote5 = getGenConBlessings1(pa5);

          let toDoQuote1 = getGenConToDo1(pa1);
          let toDoQuote2 = getGenConToDo1(pa2);
          let toDoQuote3 = getGenConToDo1(pa3);
          let toDoQuote4 = getGenConToDo1(pa4);
          let toDoQuote5 = getGenConToDo1(pa5);

          console.log(resultsArray1);
          console.log(resultsArray2);

          let genConQuote1 = resultsArray1[0];
          let genConQuote2 = resultsArray2[0];
          let genConQuote3 = resultsArray3[0];
          let genConQuote4 = resultsArray4[0];
          let genConQuote5 = resultsArray5[0];

          let definition1 = resultsArray1[1];
          let definition2 = resultsArray2[1];
          let definition3 = resultsArray3[1];
          let definition4 = resultsArray4[1];
          let definition5 = resultsArray5[1];

console.log(gencon_talk1);
          function determineWhichQuoteToUse (a, b, c, d, e) {
            let quoteToUse = "";
            let genConAuthor = "";
            let genConPosition = "";
            let genConTalkTitle = "";
            let genConYear = "";
            if (a != "") {
              quoteToUse = a;
              genConAuthor = gencon_talk1[0];
              genConPosition = gencon_talk1[1];
              genConTalkTitle = gencon_talk1[2];
              genConYear = gencon_talk1[3];
            }else if (b != "") {
              quoteToUse = b;
              genConAuthor = gencon_talk2[0];
              genConPosition = gencon_talk2[1];
              genConTalkTitle = gencon_talk2[2];
              genConAuthor = gencon_talk2[3];
            } else if (c != "") {
              quoteToUse = c;
              genConAuthor = gencon_talk3[0];
              genConPosition = gencon_talk3[1];
              genConTalkTitle = gencon_talk3[2];
              genConYear = gencon_talk3[3];
            } else if (d != "") {
              quoteToUse = d;
              genConAuthor = gencon_talk4[0];
              genConPosition = gencon_talk4[1];
              genConTalkTitle = gencon_talk4[2];
              genConYear = gencon_talk4[3];
            } else if (e != "") {
              quoteToUse = e;
              genConAuthor = gencon_talk5[0];
              genConPosition = gencon_talk5[1];
              genConTalkTitle = gencon_talk5[2];
              genConYear = gencon_talk5[3];
            }
            return [quoteToUse, genConAuthor, genConPosition, genConTalkTitle, genConYear];
          }

          let genConTalkQuoteArray = determineWhichQuoteToUse(genConQuote1, genConQuote2, genConQuote3, genConQuote3, genConQuote4, genConQuote5);
          let defQuote = genConTalkQuoteArray[0];
          let genConfAuthor1 = genConTalkQuoteArray[1];
          let genConfPosition1 = genConTalkQuoteArray[2];
          let genConfTitle1 = genConTalkQuoteArray[3];
          let genConfYear1 = genConTalkQuoteArray[4];

          let genConTalkBlessingsArray = determineWhichQuoteToUse(blessingsQuote1, blessingsQuote2, blessingsQuote3, blessingsQuote4, blessingsQuote5);
          let blessQuote = genConTalkBlessingsArray[0];
          let genConfAuthor2 = genConTalkBlessingsArray[1];
          let genConfPosition2 = genConTalkBlessingsArray[2];
          let genConfTitle2 = genConTalkBlessingsArray[3];
          let genConfYear2 = genConTalkBlessingsArray[4];

          let genConTalktoDoArray = determineWhichQuoteToUse(toDoQuote1, toDoQuote2, toDoQuote3, toDoQuote4, toDoQuote5);
          let toDoQoute = genConTalktoDoArray[0];
          let genConfAuthor3 = genConTalktoDoArray[1];
          let genConfPosition3 = genConTalktoDoArray[2];
          let genConfTitle3 = genConTalktoDoArray[3];
          let genConfYear3 = genConTalktoDoArray[4];





          function getPhrase1 (x, y) {

            if(x.includes(key) == true) {
           test_str = y;
             start_pos = test_str.indexOf(key) - 10;
             end_pos = test_str.indexOf(".",start_pos);
             text_to_get = test_str.substring(start_pos,end_pos)

          }else if (x.includes(topic) == true) {
            test_str = y;
              start_pos = test_str.indexOf(topic) - 10;
              end_pos = test_str.indexOf(".",start_pos);
              text_to_get = test_str.substring(start_pos,end_pos)

          } else {
            console.log("NONONONONONONONO");
          }
            return text_to_get;
          }
          let phrase1 = getPhrase1(verse1, verse1);


          function getPhrase2 (x, y) {

            if(x.includes(key) == true) {
           test_str = y;
             start_pos = test_str.indexOf(key) - 10;
             end_pos = test_str.indexOf(".",start_pos);
             text_to_get = test_str.substring(start_pos,end_pos)

          }else if (x.includes(topic) == true) {
            test_str = y;
              start_pos = test_str.indexOf(topic) - 10;
              end_pos = test_str.indexOf(".",start_pos);
              text_to_get = test_str.substring(start_pos,end_pos)

          } else {
            console.log("NONONONONONONONO");
          }
            return text_to_get;
          }
          let phrase2 = getPhrase2(verse2, verse2);



          function getPhrase3 (x, y) {

            if(x.includes(key) == true) {
           test_str = y;
             start_pos = test_str.indexOf(key) - 10;
             end_pos = test_str.indexOf(".",start_pos);
             text_to_get = test_str.substring(start_pos,end_pos)

          }else if (x.includes(topic) == true) {
            test_str = y;
              start_pos = test_str.indexOf(topic) - 10;
              end_pos = test_str.indexOf(".",start_pos);
              text_to_get = test_str.substring(start_pos,end_pos)

          } else {
            console.log("NONONONONONONONO");
          }
            return text_to_get;
          }
          let phrase3 = getPhrase3(verse3, verse3);



          function determinePhrasing (x) {
            let theBefore = "";
            let before = "";
            let after = "";
            let questiontoDo = "";
            let questionBlessings = "";
            if (x == "agency") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we righteously exercise";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "atonement") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to access";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "baptism") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to recieve the blessings of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "bookofmormon") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "how can we benefit from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "charity") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to have";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "creation") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we learn from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "church") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to recieve blessings from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "doctrinecovenants") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to access the blessings of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "god") {
              theBefore = "";
              before = "who is";
              after = "is";
              questiontoDo = "what must we do to be closer to";
              questionBlessings = "what are the blessings of being closer to";
            }

            else if ( x == "faith") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we have more";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "holyghost") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to receive promptings from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "honesty") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we be more";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "newtestament") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to access blessings from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "obedience") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we strive for more";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "oldtestament") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to access the blessings of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "priesthood") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we do to benefit from";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "prophets") {
              theBefore = "";
              before = "what are";
              after = "are";
              questiontoDo = "what can we do to gain a testimony of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "repentence") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to gain the blessings of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "sacrament") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "how can we be blessed by";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "scriptures") {
              theBefore = "the";
              before = "what are";
              after = "are";
              questiontoDo = "how can we prioritize";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "service") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we prioritize";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "thefall") {
              theBefore = "";
              before = "what was";
              after = "was";
              questiontoDo = "what can we do to understand";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "jesus") {
              theBefore = "";
              before = "who is";
              after = "is";
              questiontoDo = "how can we be more like";
              questionBlessings = "what blessings come from drawing closer to";
            }

            else if ( x == "wordofwisdom") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to live";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "apostle") {
              theBefore = "an";
              before = "what is an";
              after = "is";
              questiontoDo = "how can we follow";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "godhead") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "how can we live closer to";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "testimony") {
              theBefore = "a";
              before = "what is a";
              after = "is";
              questiontoDo = "what can we do to gain";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "hell") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to avoid";
              questionBlessings = "what are the blessings of not being in";
            }

            else if ( x == "marriage") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we be worthy of";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "heaven") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what must we do to one day be in";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "missionary") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we be better at";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "nativity") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we do to understand";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "pioneer") {
              theBefore = "the";
              before = "who were";
              after = "are";
              questiontoDo = "what can we do to be like";
              questionBlessings = "what are the blessings of";
            }

            else if ( x == "premortal") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we learn from";
              questionBlessings = "what are the blessings of knowing about";
            }

            else if ( x == "resurrection") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we do to be ready for";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "women") {
              theBefore = "";
              before = "who are";
              after = "are";
              questiontoDo = "what can we do to show appreciation for";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "apostasy") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we learn from";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "family") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what blessings come from";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "chastity") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we prioritize";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "children") {
              theBefore = "";
              before = "what are";
              after = "are";
              questiontoDo = "how can we be more like";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "covenants") {
              theBefore = "";
              before = "what are";
              after = "are";
              questiontoDo = "how can we keep our";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "death") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what can we learn about";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "genealogy") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "what can we learn from";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "giftsofthespirit") {
              theBefore = "the";
              before = "what are";
              after = "are";
              questiontoDo = "what can we do to receive";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "gospel") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we do to live by the teachings of";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "happiness") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we have more";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "miracles") {
              theBefore = "";
              before = "what are";
              after = "are";
              questiontoDo = "what can we do to learn about";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "selfreliance") {
              theBefore = "";
              before = "what is";
              after = "is";
              questiontoDo = "how can we focus on";
              questionBlessings = "what are the blessings of";
            }
            else if ( x == "secondcoming") {
              theBefore = "the";
              before = "what is";
              after = "is";
              questiontoDo = "what can we do to be prepared for";
              questionBlessings = "what are the blessings of";
            }
            return [theBefore, before, after, questiontoDo, questionBlessings];
          }
          let questionArray = determinePhrasing(keyWord);
           theBefore = questionArray[0];
           before = questionArray[1];
           after = questionArray[2];
           questiontoDo = questionArray[3];
           questionBlessings = questionArray[4];

          let is_are = "";
          function isPlural (x) {
            let lastChar = x.substr(x.length - 1);
            if ( lastChar == "s") {
              is_are = "are";
            }else{
              is_are = "is";
            }
            return is_are
          }
          let isAre = isPlural(topic);

          let markup =
            `<p>

              As I was preparing to speak today, on the topic of ${theBefore} ${keyWord}, one of the first questions I asked myself was ${before}, ${theBefore} ${keyWord}?  It may seem like a simple question, but sometimes the most simple doctrines are ones we often overlook.
              </p>
              <p>
              To answer this question, I started by looking through recent General Conference addresses relating to ${theBefore} ${keyWord}.  In ${genConfYear1}, ${genConfAuthor1}, who is ${genConfPosition1}, gave a conference address entitled, ${genConfTitle1}, in which he defines ${theBefore} ${keyWord} in what I thought was a very interesting way.  Here's what he says:
              </p>
              <p>
              ${defQuote}
              </p>
              <p>
              His words really stuck with me, (re-read a portion of the quote here)
              </p>
              <p>
              It made me think about a time in my life when (share a personal experience related to the topic.)
              </p>
              <p>
              So naturally, with this in mind, my next question was, ${questiontoDo} ${theBefore} ${keyWord}?  Again turning to modern revelation, I was reminded of a General Conference address by ${genConfAuthor2} who is ${genConfPosition2}.  It's really, great, and I don't have time to read all of it here, but if you get a chance to read it later this week, I would highly recommend it.  The talk is entitled ${genConfTitle2} from the ${genConfYear2} General Conference.  In that address he has this to say, about what we can do.
              </p>
              <p>
              ${toDoQoute}
              </p>
              <p>
              His comments reminded me that while I'm always striving to be better, there is always room to improve.  It reminded me of one of my favorite scriptures, located in the ${standardWork}, ${book}, ${chapter}.  Now, this is the part where ${speaker}, I believe, is speaking with ${listener}, and they touch on the topic of ${keyWord} in a similar way.  This section really covers verses ${verses}, but I'll only read a few of them here.
              </p>
              <p>
              ${verse1}
              </p>
              <p>
              In my own life, I think I can apply this by ( describe ways you can apply these verses and talks)
              </p>
              <p>
              Lastly, I really wanted to know why ${theBefore} ${keyWord} is so important.  ${questionBlessings} ${theBefore} ${keyWord}?  ${genConfAuthor3} who is ${genConfPosition3}, I believe, answers this question the best.  Now, I know we aren't supposed to have favorite General Authorities, but we all do, and they're just one of my favorites, so I try to fit quotes in by them in any talk I give.  in ${genConfYear3}, they gave an address entitled ${genConfTitle3}, where he talks about the blessings associated with ${theBefore} ${keyWord}.  Let me read just a segment of this talk, but if you ever get a chance to go back and read it again, it's great.  They start off by saying this:
              </p>
              <p>
              ${blessQuote}
              </p>
              <p>
              Don't you just love that?  Now, I know I'm short on time, but let me just summarize by saying, (summarize the talk here briefly).
              </p>







            `





          document.getElementById('para1').innerHTML = markup;





          //
          //
    // console.log(newObj);
          // let paragraph2 = "As I was preparing to speak today"

})
})

})



})
}
})






  </script>
<script>


//
//
// document.getElementById('intro').innerHTML = paragraph1;
//
// document.getElementById('para5').innerHTML = paragraph2;
// document.getElementById('para6').innerHTML = paragraph3;
// document.getElementById('para7').innerHTML = paragraph4;
// document.getElementById('para9').innerHTML = paragraph5;
// document.getElementById('para10').innerHTML = paragraph6;
// document.getElementById('para11').innerHTML = paragraph11;

// }

</script>


</head>

<body id="body">


  <section class="search">
    <label> What is your talk topic? </label>
    <input placeholder="topic" class="videoInput" type="text" id="topicInput">
    </span>
    <button class="submitButton2" type="submit" id="genconf" name="button">generate talk</button>

</section>


<p id="intro"></p>
<p id="para1"></p>
<p id="para2"></p>
<p id="para3"></p>
<p id="para4"></p>
<p id="para5"></p>
<p id="para6"></p>
<p id="para7"></p>
<p id="para8"></p>
<p id="para9"></p>
<p id="para10"></p>
<p id="chapter"></p>
<p id="number"></p>
<p id="verse"></p>
<p id="chapter2"></p>
<p id="number2"></p>
<p id="verse2"></p>

</body>

</html>
